---
interface Props {
  isLarge?: boolean;
}

const { isLarge } = Astro.props;
---

<decimal-clock class=`time ${isLarge ? 'time--large' : ''}`>
  <span class="js-time"></span>
</decimal-clock>

<script>
  class DecimalClock extends HTMLElement {
    private time: HTMLTimeElement;
    private animationFrameId?: number;
    private lastUpdate: number;
    private TOTAL_SECONDS_IN_DAY = 24 * 60 * 60;
    private TOTAL_METRIC_SECONDS_IN_DAY = 10 * 100 * 100;
    private DECIMAL_SECOND_MS = 864; // 100,000 decimal seconds per day = 864ms per decimal second

    constructor() {
      super();
      this.time = this.querySelector('.js-time')!;
      this.lastUpdate = performance.now();
    }

    connectedCallback() {
      this.setDecimalTime();
      this.updateTime();
    }

    disconnectedCallback() {
      if (this.animationFrameId) {
        cancelAnimationFrame(this.animationFrameId);
        this.animationFrameId = undefined;
      }
    }

    private updateTime(): void {
      const now = new Date();
      const totalMs =
        now.getHours() * 3600000 + now.getMinutes() * 60000 + now.getSeconds() * 1000 + now.getMilliseconds();

      // Calculate how far we are into the current decimal second
      const msIntoDecimalSecond = totalMs % this.DECIMAL_SECOND_MS;

      // Update if we're within 16ms of the next decimal second
      if (msIntoDecimalSecond > this.DECIMAL_SECOND_MS - 16) {
        this.setDecimalTime();
      }

      this.animationFrameId = requestAnimationFrame(() => this.updateTime());
    }

    private formatNumber(num: number, leadingZero: boolean = true): string {
      return String(Math.floor(num)).padStart(leadingZero ? 2 : 1, '0');
    }

    private setDecimalTime(): void {
      const now = new Date();
      const secondsSinceMidnight =
        now.getHours() * 3600 + now.getMinutes() * 60 + now.getSeconds() + now.getMilliseconds() / 1000;

      // Calculate the fraction of the day that has passed
      const fractionOfDay = secondsSinceMidnight / this.TOTAL_SECONDS_IN_DAY;

      // Convert the fraction of the day into metric time
      const metricSecondsElapsed = fractionOfDay * this.TOTAL_METRIC_SECONDS_IN_DAY;

      // Break down metric time into hours, minutes, and seconds
      const decimalTime = {
        hours: this.formatNumber(metricSecondsElapsed / 10_000, false),
        minutes: this.formatNumber((metricSecondsElapsed % 10_000) / 100),
        seconds: this.formatNumber(metricSecondsElapsed % 100),
      };

      this.time.innerHTML = `${decimalTime.hours}:${decimalTime.minutes}:${decimalTime.seconds}`;
    }
  }

  customElements.define('decimal-clock', DecimalClock);
</script>

<style lang="scss">
  @use '../../styles/mixins' as *;

  .time {
    @include label;
    &--large {
      font-size: var(--step-2);
    }
    &__label {
      @include visually-hidden;
    }
  }
</style>
