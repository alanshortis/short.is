---
interface Props {
  isLarge?: boolean;
}

const { isLarge } = Astro.props;
---

<decimal-clock class={`time ${isLarge ? 'time--large' : ''}`}>
  <span class="js-time"></span>
</decimal-clock>

<script>
  import type { DecimalTime } from '../../shared-types';

  class DecimalClock extends HTMLElement {
    private worker: Worker;
    private timeSpan: HTMLSpanElement;
    private pad: (num: number) => string;

    constructor() {
      super();
      this.worker = new Worker(new URL('/src/workers/decimal-clock.ts', import.meta.url));
      this.timeSpan = this.querySelector('.js-time') as HTMLSpanElement;

      this.pad = (num: number) => num.toString().padStart(2, '0');

      this.worker.onmessage = (event: MessageEvent<DecimalTime>) => {
        this.timeSpan.textContent = `${event.data.hours}:${this.pad(event.data.minutes)}:${this.pad(event.data.seconds)}`;
      };
    }

    disconnectedCallback() {
      this.worker.terminate();
    }
  }

  customElements.define('decimal-clock', DecimalClock);
</script>

<style lang="scss">
  @use '../../styles/mixins' as *;

  .time {
    @include label;
    &--large {
      font-size: var(--step-2);
    }
    &__label {
      @include visually-hidden;
    }
  }
</style>
