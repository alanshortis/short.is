<analog-decimal-clock class="clock">
  <time datetime="" class="js-time clock__literal"></time>
  <div class="clock__face">
    <div class="clock__segment"></div>
    <div class="clock__segment"></div>
    <div class="clock__segment"></div>
    <div class="clock__segment"></div>
    <div class="clock__segment"></div>
    <div class="clock__hand clock__hand--hours"></div>
    <div class="clock__hand clock__hand--minutes"></div>
    <div class="clock__hand clock__hand--seconds"></div>
  </div>
</analog-decimal-clock>

<script>
  import type { DecimalTime } from '../../shared-types';

  class AnalogDecimalClock extends HTMLElement {
    private worker: Worker;
    private time: HTMLTimeElement;
    private pad: (num: number) => string;

    constructor() {
      super();
      this.worker = new Worker(new URL('/src/workers/decimal-clock.ts', import.meta.url));
      this.time = this.querySelector('time')!;

      this.pad = (num: number) => num.toString().padStart(2, '0');

      this.style.setProperty('--seconds-transform', 'rotate(0turn)');
      this.style.setProperty('--minutes-transform', 'rotate(0turn)');
      this.style.setProperty('--hours-transform', 'rotate(0turn)');

      this.worker.onmessage = (event: MessageEvent<DecimalTime>) => {
        this.setDecimalTime(event.data);
      };
    }

    disconnectedCallback() {
      this.worker.terminate();
    }

    private setDecimalTime(decimalTime: DecimalTime): void {
      const { hours, minutes, seconds } = decimalTime;
      const formattedTime = `${hours}:${this.pad(minutes)}:${this.pad(seconds)}`;

      this.time.innerHTML = formattedTime;
      this.time.setAttribute('datetime', formattedTime);
      this.style.setProperty('--seconds-transform', `rotate(0.${this.pad(seconds)}turn)`);
      this.style.setProperty('--minutes-transform', `rotate(0.${this.pad(minutes)}turn)`);
      this.style.setProperty('--hours-transform', `rotate(0.${hours}turn)`);
    }
  }

  customElements.define('analog-decimal-clock', AnalogDecimalClock);
</script>

<style lang="scss">
  @use '../../styles/mixins' as *;
  .clock {
    margin-block: var(--space--large);
    display: flex;
    justify-content: center;
    &__literal {
      @include visually-hidden;
    }
    &__face {
      aspect-ratio: 1 / 1;
      width: 15rem;
      background-color: var(--foreground);
      border-radius: 50%;
      display: grid;
      place-content: center;
      position: relative;
    }
    &__segment {
      grid-area: 1 / 1;
      height: 15rem;
      opacity: 0.75;
      width: 2px;
      background: linear-gradient(
        to bottom,
        var(--foreground) 0%,
        var(--foreground) 2px,
        var(--background) 2px,
        var(--background) 17px,
        var(--foreground) 17px,
        var(--foreground) calc(100% - 17px),
        var(--background) calc(100% - 17px),
        var(--background) calc(100% - 2px),
        var(--foreground) calc(100% - 2px),
        var(--foreground) 100%
      );

      &:nth-child(2) {
        rotate: 0.1turn;
      }
      &:nth-child(3) {
        rotate: 0.2turn;
      }
      &:nth-child(4) {
        rotate: 0.3turn;
      }
      &:nth-child(5) {
        rotate: 0.4turn;
      }
    }
    &__hand {
      height: calc(50% - 20px);
      background-color: var(--background);
      position: absolute;
      left: calc(50% - 1px);
      bottom: 50%;
      transform-origin: bottom;
      &--seconds {
        width: 2px;
        border-radius: 2px;
        background-color: var(--seconds);
        transform: var(--seconds-transform);
        &::after {
          content: '';
          display: block;
          width: 18px;
          height: 18px;
          background-color: var(--seconds);
          border-radius: 50%;
          position: absolute;
          left: calc(50% - 9px);
          bottom: -9px;
        }
      }
      &--minutes {
        width: 5px;
        border-radius: 5px;
        background-color: var(--background);
        transform: var(--minutes-transform);
        transform-origin: bottom;
        left: calc(50% - 2.5px);
      }
      &--hours {
        width: 7px;
        height: calc(50% - 40px);
        border-radius: 7px;
        background-color: var(--background);
        transform: var(--hours-transform);
        transform-origin: bottom;
        left: calc(50% - 3.5px);
      }
    }
  }
</style>
