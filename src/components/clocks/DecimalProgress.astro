<div class="progress">
  <decimal-progress>
    <div class="progress__outer" role="progressbar" aria-valuemin="0" aria-valuemax="99.99" aria-valuenow="0">
      <div class="progress__inner" style="width: 20%"></div>
    </div>
    <span class="progress__label"></span>
  </decimal-progress>
</div>

<script>
  interface DecimalTime {
    hours: string;
    minutes: string;
    seconds: string;
  }

  class DecimalProgress extends HTMLElement {
    private progressOuter: HTMLDivElement;
    private progressInner: HTMLDivElement;
    private progressLabel: HTMLDivElement;
    private animationFrameId?: number;
    private lastUpdate: number;
    private TOTAL_SECONDS_IN_DAY = 24 * 60 * 60;
    private TOTAL_METRIC_SECONDS_IN_DAY = 10 * 100 * 100;
    private DECIMAL_SECOND_MS = 864; // 100,000 decimal seconds per day = 864ms per decimal second

    constructor() {
      super();
      this.progressOuter = this.querySelector('.progress__outer')!;
      this.progressInner = this.progressOuter.querySelector('.progress__inner')!;
      this.progressLabel = this.querySelector('.progress__label')!;
      this.lastUpdate = performance.now();
    }

    connectedCallback() {
      this.setDecimalTime();
      this.updateTime();
    }

    disconnectedCallback() {
      if (this.animationFrameId) {
        cancelAnimationFrame(this.animationFrameId);
        this.animationFrameId = undefined;
      }
    }

    private updateTime(): void {
      const now = new Date();
      const totalMs =
        now.getHours() * 3600000 + now.getMinutes() * 60000 + now.getSeconds() * 1000 + now.getMilliseconds();

      // Calculate how far we are into the current decimal second
      const msIntoDecimalSecond = totalMs % this.DECIMAL_SECOND_MS;

      // Update if we're within 16ms of the next decimal second
      // 16ms is approximately one frame at 60fps
      if (msIntoDecimalSecond > this.DECIMAL_SECOND_MS - 16) {
        this.setDecimalTime();
      }

      this.animationFrameId = requestAnimationFrame(() => this.updateTime());
    }

    private setDecimalTime(): void {
      const now = new Date();
      const secondsSinceMidnight =
        now.getHours() * 3600 + now.getMinutes() * 60 + now.getSeconds() + now.getMilliseconds() / 1000;

      // Calculate the fraction of the day that has passed
      const fractionOfDay = secondsSinceMidnight / this.TOTAL_SECONDS_IN_DAY;

      // Convert the fraction of the day into metric time
      const metricSecondsElapsed = fractionOfDay * this.TOTAL_METRIC_SECONDS_IN_DAY;
      const elapsedPercentage = ((metricSecondsElapsed / this.TOTAL_METRIC_SECONDS_IN_DAY) * 100).toFixed(3);

      this.progressOuter.ariaValueNow = elapsedPercentage;
      this.progressInner.style.width = `${elapsedPercentage}%`;
      this.progressLabel.innerHTML = `${elapsedPercentage}%`;
      this.progressLabel.style.left = `${elapsedPercentage}%`;
    }
  }

  customElements.define('decimal-progress', DecimalProgress);
</script>

<style lang="scss">
  @use '../../styles/mixins' as *;

  .progress {
    margin-block: var(--space--large);
    margin-inline: auto;
    width: 70%;
    &__outer {
      background:
        linear-gradient(90deg, var(--background) calc(4px - 1px), transparent 1%) center / 4px 4px,
        linear-gradient(var(--background) calc(4px - 1px), transparent 1%) center / 4px 4px,
        var(--foreground);
      height: 22px;
      background-position: center right;
    }
    &__inner {
      background-color: var(--foreground);
      height: 100%;
    }
    &__label {
      position: relative;
      margin-inline-start: -3ch;
      top: 0.5ch;
      @include label;
      &::before {
        content: '';
        position: absolute;
        height: 60%;
        width: 1px;
        left: calc(3ch - 1px);
        top: -1.5ch;
        background-color: currentColor;
      }
    }
  }
</style>
